// 在 "100 game" 这个游戏中，两名玩家轮流选择从 1 到 10 的任意整数，累计整数和，先使得累计整数和达到或超过 100 的玩家，即为胜者。
//
// 如果我们将游戏规则改为 “玩家不能重复使用整数” 呢？
//
// 例如，两个玩家可以轮流从公共整数池中抽取从 1 到 15 的整数（不放回），直到累计整数和 >= 100。
//
// 给定一个整数 maxChoosableInteger （整数池中可选择的最大数）和另一个整数 desiredTotal（累计和），判断先出手的玩家是否能稳
// 赢（假设两位玩家游戏时都表现最佳）？
//
// 你可以假设 maxChoosableInteger 不会大于 20， desiredTotal 不会大于 300。
//
// 示例：
//
// 输入：
// maxChoosableInteger = 10
// desiredTotal = 11
//
// 输出：
// false
//
// 解释：
// 无论第一个玩家选择哪个整数，他都会失败。
// 第一个玩家可以选择从 1 到 10 的整数。
// 如果第一个玩家选择 1，那么第二个玩家只能选择从 2 到 10 的整数。
// 第二个玩家可以通过选择整数 10（那么累积和为 11 >= desiredTotal），从而取得胜利.
// 同样地，第一个玩家选择任意其他整数，第二个玩家都会赢。
//
// Related Topics 极小化极大 动态规划
// 👍 181 👎 0

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

// leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    /**
     * 稳赢：第一个选手先手选择某一个数字后，无论后续第二个选手和第一个选手怎么交替选择剩余的数字，可以保证最后稳赢
     */
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        if (maxChoosableInteger >= desiredTotal)
            return true;
        if (maxChoosableInteger * (maxChoosableInteger + 1) / 2 < desiredTotal)
            return false;
        // 排除 0000...0
        Boolean[] dp = new Boolean[(1 << maxChoosableInteger) - 1];
        return canWin(maxChoosableInteger, desiredTotal, 0, dp);
    }

    /**
     * 状态压缩
     *
     */
    private boolean canWin(int maxChoosableInteger, int desiredTotal, int state, Boolean[] dp) {
        if (dp[state] != null) {
            return dp[state];
        }
        for (int i = 1; i <= maxChoosableInteger; i++) {
            int tmp = (1 << (i - 1));
            // 该数没有被选中过
            if ((tmp & state) == 0) {
                // state 是值传递，所以每次进入到下一层，并没有改变本层的state的值
                // 因此不用像使用 数组记录被选中的数字的状态 去动态维护 state的值
                if (desiredTotal - i <= 0 || !canWin(maxChoosableInteger, desiredTotal - i, tmp | state, dp)) {
                    // 如果当前玩家选择 i 后，剩余的情况 下一玩家稳输，则证明当前玩家选择i后稳赢
                    dp[state] = true;
                    return true;
                }
            }
        }
        // 如果for循环执行完成还没有返回，说明当前玩家稳输
        dp[state] = false;
        return false;
    }
}
// leetcode submit region end(Prohibit modification and deletion)

// 在 "100 game" 这个游戏中，两名玩家轮流选择从 1 到 10 的任意整数，累计整数和，先使得累计整数和达到或超过 100 的玩家，即为胜者。
//
// 如果我们将游戏规则改为 “玩家不能重复使用整数” 呢？
//
// 例如，两个玩家可以轮流从公共整数池中抽取从 1 到 15 的整数（不放回），直到累计整数和 >= 100。
//
// 给定一个整数 maxChoosableInteger （整数池中可选择的最大数）和另一个整数 desiredTotal（累计和），判断先出手的玩家是否能稳
// 赢（假设两位玩家游戏时都表现最佳）？
//
// 你可以假设 maxChoosableInteger 不会大于 20， desiredTotal 不会大于 300。
//
// 示例：
//
// 输入：
// maxChoosableInteger = 10
// desiredTotal = 11
//
// 输出：
// false
//
// 解释：
// 无论第一个玩家选择哪个整数，他都会失败。
// 第一个玩家可以选择从 1 到 10 的整数。
// 如果第一个玩家选择 1，那么第二个玩家只能选择从 2 到 10 的整数。
// 第二个玩家可以通过选择整数 10（那么累积和为 11 >= desiredTotal），从而取得胜利.
// 同样地，第一个玩家选择任意其他整数，第二个玩家都会赢。
//
// Related Topics 极小化极大 动态规划
// 👍 181 👎 0

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

// leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    /**
     * 稳赢：第一个选手先手选择某一个数字后，无论后续第二个选手和第一个选手怎么交替选择剩余的数字，可以保证最后稳赢
     */
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        if (maxChoosableInteger >= desiredTotal)
            return true;
        if ((1 + maxChoosableInteger) * maxChoosableInteger / 2 < desiredTotal)
            return false;
        int[] state = new int[maxChoosableInteger + 1];
        HashMap<String, Boolean> map = new HashMap<>();
        return canWin(state, desiredTotal, map);
    }

    private boolean canWin(int[] state, int desiredTotal, HashMap<String, Boolean> map) {
        String key = Arrays.toString(state);
        if (map.containsKey(key)) {
            return map.get(key);
        }
        for (int i = 1; i < state.length; i++) {
            if(state[i] == 0){
                // 当前选手先手选择i
                state[i] = 1;
                // 后续选手 在desiredTotal = desiredTotal - i，state = state - {i}的情况下能否稳赢
                // 如果能够稳赢即canWin 为 true ，则当前选手就lose
                // 如果不能稳赢即 canWin 为false，则当前选手就success
                if(desiredTotal - i <= 0 || !canWin(state,desiredTotal - i,map)){
                    // 无论哪个选手走到当前state的情况，都可以稳赢
                    // 记录该情况，以便后续遇到该情况不必再次计算
                    map.put(key,true);
                    state[i] = 0;
                    return true;
                }
                state[i] = 0;
            }
        }
        map.put(key,false);
        return false;
    }
}
// leetcode submit region end(Prohibit modification and deletion)

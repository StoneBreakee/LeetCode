// 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
//
// 示例 1:
//
// 输入: n = 12
// 输出: 3
// 解释: 12 = 4 + 4 + 4.
//
// 示例 2:
//
// 输入: n = 13
// 输出: 2
// 解释: 13 = 4 + 9.
// Related Topics 广度优先搜索 数学 动态规划
// 👍 712 👎 0

import java.util.ArrayList;
import java.util.List;

// leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int numSquares(int n) {
        if (n <= 2) {
            return n;
        }
        // 最简易的背包问题
        // 容量为n ,每个物体的体积依次为1，4，9 求最少可以使用几个物品
        List<Integer> list = new ArrayList<>();
        for (int i = 1; i * i <= n; i++) {
            list.add(i * i);
        }
        int len = list.size();
        // dp[i][j] 将物品i放入容量为j的背包需要的数量
        int[][] dp = new int[len][n + 1];
        int[] arr = new int[len];
        for (int i = 0; i < len; i++) {
            arr[i] = list.get(i);
        }
        for (int i = 1; i <= n; i++) {
            dp[0][i] = i;
        }
        for (int i = 1; i < len; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = Integer.MAX_VALUE;
                if (j - arr[i] == 0) {
                    dp[i][j] = 1;
                } else {
                    int x = j / arr[i];
                    int y = j % arr[i];
                    dp[i][j] = Math.min(x + dp[i - 1][y], dp[i][j]);
                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j]);
                }
            }
        }
        return dp[len - 1][n];
    }
}
// leetcode submit region end(Prohibit modification and deletion)
